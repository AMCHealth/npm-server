{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "Launches OpsWorks stack, layer, instances and associated resources to run the application.",
  "Parameters": {
    "AppName":{
      "Type":"String",
      "Default":"npm",
      "Description":"What to call the app"
    },
    "GitSshKey": {
      "NoEcho": "true",
      "Type" : "String",
      "Description": "The ssh key you use to authenticate to the cookbook repo"
    },
    "GitCookbookRepo": {
      "Default" : "git@github.com:AMCHealth/soda-machine_cookbooks.git",
      "Type" : "String",
      "Description": "Where the cookbooks to build the Stelligent Website are stored"
    },
    "GitAppRepo": {
      "Default" : "git@github.com:AMCHealth/clinical-trials.git",
      "Type" : "String",
      "Description": "Where the stelligent.com application code is stored"
    },
    "GitAppRepoRevision" : {
      "Type" : "String",
      "Default" : "master",
      "Description" : "The git branch of the repository you'd like Jenkins to be configured to look at."
    },
    "DefaultKeyPair" : {
      "Description" : "Name of an existing EC2 KeyPair to enable SSH access to the instances",
      "Type" : "String",
      "Default" : "yourprivatekey",
      "MinLength": "1",
      "MaxLength": "64",
      "AllowedPattern" : "[-_ a-zA-Z0-9]*",
      "ConstraintDescription" : "can contain only alphanumeric characters, spaces, dashes and underscores."
    },
    "VPC" : {
      "Description" : "Id of the VPC to Launch into",
      "Type" : "String"
    },
    "PublicSubnet" : {
      "Description" : "Id of the public subnet",
      "Type" : "String"
    },
    "PrivateSubnet" : {
      "Description" : "Id of the private subnet",
      "Type" : "String"
    },
    "CouchServer" : {
      "Default" : "http://npmdb.amcstealth.com",
      "Description" : "The CouchServer you'd like VHost ActualAddress",
      "Type" : "String"
    },
    "VHost" : {
      "Default" : "npm.amcstealth.com",
      "Description" : "The name of the VHost to connect to",
      "Type" : "String"
    }
  },
  "Resources": {
    "stack": {
      "Type": "AWS::OpsWorks::Stack",
      "Properties": {
        "Name": { "Ref": "AWS::StackName" },
        "VpcId" : { "Ref" : "VPC" },
        "DefaultSubnetId" : { "Ref" : "PrivateSubnet" },
        "DefaultSshKeyName" : { "Ref" : "DefaultKeyPair" },
        "ConfigurationManager" : {
          "Name" : "Chef",
          "Version" : "11.10"
        },
        "ServiceRoleArn": { "Fn::Join": ["", ["arn:aws:iam::", {"Ref":"AWS::AccountId"}, ":role/aws-opsworks-service-role"]] },
        "DefaultInstanceProfileArn": { "Fn::GetAtt": [ "OpsWorksInstanceProfile", "Arn" ] },
        "CustomJson": {
          "amazon" : {
            "region" : { "Ref" : "AWS::Region" }
          }
          "app" : {
            "CouchServer":{"Ref":"CouchServer"},
            "VHost" : {"Ref":"VHost"}
          }
        },
        "DefaultOs": "Amazon Linux",
        "UseCustomCookbooks": true,
        "CustomCookbooksSource": {
          "Type": "git",
          "Url": { "Ref" : "GitCookbookRepo" },
          "SshKey" : { "Ref" : "GitSshKey" }
        }
      }
    },
    "couchDbLayer": {
      "Type": "AWS::OpsWorks::Layer",
      "Properties": {
        "StackId": { "Ref": "stack" },
        "Name": "couch",
        "Type": "custom",
        "Shortname": "couch",
        "EnableAutoHealing": "true",
        "AutoAssignElasticIps": "false",
        "AutoAssignPublicIps": "true",
        "CustomSecurityGroupIds" : [
          { "Ref" : "couchDbSecurityGroup" }
        ],
        "CustomRecipes": {
          "setup":[ "couchdb" ]
        }
      }
    },
    "smartProxyLayer": {
      "Type": "AWS::OpsWorks::Layer",
      "DependsOn": "app",
      "Properties": {
        "StackId": { "Ref": "stack" },
        "Name": { "Ref" : "AppName" },
        "Type": "nodejs-app",
        "Shortname": { "Ref" : "AppName" },
        "EnableAutoHealing": "true",
        "AutoAssignElasticIps": "false",
        "AutoAssignPublicIps": "true",
        "CustomSecurityGroupIds" : [
          { "Ref" : "smartProxySecurityGroup" }
        ],
        "CustomRecipes": {
        }
      }
    },
     "couchDbInstance": {
      "Type": "AWS::OpsWorks::Instance",
      "Properties": {
        "StackId": { "Ref": "stack" },
        "LayerIds": [ { "Ref": "couchDbLayer" } ],
        "InstallUpdatesOnBoot": false,
        "InstanceType": "m3.medium",
        "RootDeviceType": "ebs",
        "Architecture": "x86_64",
        "SubnetId" : {"Ref" : "PublicSubnet"}
      }
    },
     "smartProxyInstance": {
      "Type": "AWS::OpsWorks::Instance",
      "Properties": {
        "StackId": { "Ref": "stack" },
        "LayerIds": [ { "Ref": "smartProxyLayer" } ],
        "InstallUpdatesOnBoot": false,
        "InstanceType": "m3.medium",
        "RootDeviceType": "ebs",
        "Architecture": "x86_64",
        "SubnetId" : {"Ref" : "PublicSubnet"}
      }
    },
   
    "app": {
      "Type": "AWS::OpsWorks::App",
      "Properties": {
        "StackId": { "Ref": "stack" },
        "Name": { "Ref" : "AppName" },
        "Type": "nodejs",
        "AppSource": {
          "Type": "git",
          "Url": { "Ref" : "GitAppRepo" },
          "SshKey" : { "Ref" : "GitSshKey" },
          "Revision" : { "Ref" : "GitAppRepoRevision" }
        }
      }
    },

    "couchDbSecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription" : "Allow inbound requests from the ELB to the OpsWorks instances",
        "VpcId": { "Ref": "VPC" },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "5984",
            "ToPort": "5984",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },

    "smartProxySecurityGroup": {
      "Type": "AWS::EC2::SecurityGroup",
      "Properties": {
        "GroupDescription" : "Allow inbound requests from the ELB to the OpsWorks instances",
        "VpcId": { "Ref": "VPC" },
        "SecurityGroupIngress": [
          {
            "IpProtocol": "tcp",
            "FromPort": "80",
            "ToPort": "80",
            "CidrIp": "0.0.0.0/0"
          }
        ]
      }
    },

    "OpsWorksInstanceRole": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": { "Service": [ "ec2.amazonaws.com" ] },
              "Action": [ "sts:AssumeRole" ]
            }
          ]
        },
        "Path": "/",
        "Policies": [
          {
            "PolicyName": "opsworks-service",
            "PolicyDocument": {
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": "ec2:*",
                  "Resource": "*"
                }
              ]
            }
          }
        ]
      }
    },
    "OpsWorksInstanceProfile": {
      "Type": "AWS::IAM::InstanceProfile",
      "Properties": {
        "Path": "/",
        "Roles": [ { "Ref": "OpsWorksInstanceRole" } ]
      }
    }
  },
  "Outputs": {
    "StackId": { "Value": { "Ref": "stack" } },
    "AppId":   { "Value": { "Ref": "app" } }
  }
}
